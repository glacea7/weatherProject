{"version":3,"sources":["actions/weatherActions.js","App.js","serviceWorker.js","reducers/weatherReducer.js","reducers/rootReducer.js","index.js"],"names":["getData","userInput","dispatch","getState","a","url","process","axios","get","result","weather","data","console","log","type","payload","message","App","state","isSearching","onChange","event","target","value","setState","searchSubmit","triggerGetData","props","preventDefault","dateToday","d","month","getMonth","year","getFullYear","date","getDate","handleWeather","this","main","className","noValidate","autoComplete","onSubmit","TextField","id","variant","label","Date","name","sys","country","description","Math","round","temp","temp_max","temp_min","React","Component","connect","weatherData","bindActionCreators","Boolean","window","location","hostname","match","initialState","weatherReducer","action","rootReducer","combineReducers","composeEnhancers","compose","store","createStore","applyMiddleware","thunk","theme","createMuiTheme","palette","primary","secondary","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.4d197715.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nexport const getData = (userInput) => {\r\n\treturn async (dispatch, getState) => {\r\n\t\ttry {\r\n\t\t\tconst url = `https://api.openweathermap.org/data/2.5/weather?q=${userInput}&appid=${process.env.REACT_APP_WEATHER_API_KEY}&units=imperial`;\r\n\t\t\tconst result = await axios.get(url);\r\n\t\t\tconst weather = result.data;\r\n\t\t\tconsole.log(result.data);\r\n\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: 'GET_DATA',\r\n\t\t\t\tpayload: { weather: weather },\r\n\t\t\t});\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log('ERROR 404:', error.message);\r\n\t\t}\r\n\t};\r\n};\r\n","import { TextField } from '@material-ui/core';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { getData } from './actions/weatherActions';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core';\n\nclass App extends React.Component {\n\tstate = {\n\t\tuserInput: '',\n\t\tisSearching: false,\n\t};\n\tonChange = (event) => {\n\t\tlet { userInput } = this.state;\n\t\tuserInput = event.target.value;\n\t\tconsole.log(userInput);\n\t\tthis.setState({ userInput: userInput });\n\t};\n\tsearchSubmit = async (event) => {\n\t\tconst { userInput } = this.state;\n\t\tconst { triggerGetData } = this.props;\n\t\tevent.preventDefault();\n\t\tthis.setState({ isSearching: true });\n\t\tawait triggerGetData(userInput);\n\t\tthis.setState({ userInput: '', isSearching: false });\n\t};\n\tdateToday = (d) => {\n\t\tlet months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n\n\t\tlet month = months[d.getMonth()];\n\t\tlet year = d.getFullYear();\n\t\tlet date = d.getDate();\n\n\t\treturn `${month} ${date} ${year}`;\n\t};\n\n\trender() {\n\t\tlet handleWeather = 'AppDefault';\n\t\tconst { isSearching, userInput } = this.state;\n\t\tconst { weather } = this.props;\n\n\t\tif (isSearching && !weather.weather) {\n\t\t\treturn <div>Loading...</div>;\n\t\t}\n\n\t\tif (weather.weather && weather.weather[0] && weather.weather[0].main && weather.weather[0].main === 'Clear') {\n\t\t\thandleWeather = 'AppClear';\n\t\t}\n\t\tif (weather.weather && weather.weather[0] && weather.weather[0].main && weather.weather[0].main === 'Clouds') {\n\t\t\thandleWeather = 'AppCloudy';\n\t\t}\n\t\tif (weather.weather && weather.weather[0] && weather.weather[0].main && weather.weather[0].main === 'Thunderstorm') {\n\t\t\thandleWeather = 'AppThunderStorm';\n\t\t}\n\t\tif (weather.weather && weather.weather[0] && weather.weather[0].main && weather.weather[0].main === 'Clear') {\n\t\t\thandleWeather = 'AppClear';\n\t\t}\n\t\tif (weather.weather && weather.weather[0] && weather.weather[0].main && weather.weather[0].main === 'Rain') {\n\t\t\thandleWeather = 'AppRainy';\n\t\t}\n\t\tif (weather.weather && weather.weather[0] && weather.weather[0].main && weather.weather[0].main === 'Drizzle') {\n\t\t\thandleWeather = 'AppRainy';\n\t\t}\n\n\t\treturn (\n\t\t\t<div className={handleWeather}>\n\t\t\t\t<main>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<form className=\"search-box\" noValidate autoComplete=\"off\" onSubmit={this.searchSubmit}>\n\t\t\t\t\t\t\t<TextField id=\"filled-basic\" className=\"search-bar\" variant=\"filled\" label=\"Search US City\" onChange={this.onChange}  value={userInput}>\n\t\t\t\t\t\t\t\t{/* <input type=\"text\" value={userInput} onChange={this.onChange} /> */}\n\t\t\t\t\t\t\t</TextField>\n\t\t\t\t\t\t</form>\n\t\t\t\t\t\t{typeof weather.main != 'undefined' ? (\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<div className=\"date\">{this.dateToday(new Date())}</div>\n\t\t\t\t\t\t\t\t<div className=\"location-box\">\n\t\t\t\t\t\t\t\t\t<div className=\"location\">\n\t\t\t\t\t\t\t\t\t\t{weather.name}, {weather.sys.country}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"weather\">\n\t\t\t\t\t\t\t\t\t\t{weather.weather[0].main}, {weather.weather[0].description}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"temp-box\">\n\t\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<h2 className=\"temp1\">{Math.round(weather.main.temp)}° F</h2>\n\t\t\t\t\t\t\t\t\t<div className=\"temp2\">\n\t\t\t\t\t\t\t\t\t\tHi {Math.round(weather.main.temp_max)}° F Lo {Math.round(weather.main.temp_min)}° F\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t</main>\n\t\t\t\t<footer>Made with OpenWeather Current Weather Data API</footer>\n\t\t\t</div>\n\t\t);\n\t}\n}\nconst mapStateToProps = (state) => {\n\treturn { weather: state.weatherData.weather };\n};\nconst mapDispatchToProps = (dispatch) => {\n\treturn { triggerGetData: bindActionCreators(getData, dispatch) };\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialState = {\r\n\tweather: [],\r\n};\r\n\r\nfunction weatherReducer(state = initialState, action) {\r\n\tswitch (action.type) {\r\n\t\tcase 'GET_DATA': {\r\n\t\t\tconst { weather } = action.payload;\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tweather: weather,\r\n\t\t\t};\r\n\t\t}\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\nexport default weatherReducer;\r\n","import weatherReducer from './weatherReducer';\r\nimport { combineReducers } from 'redux';\r\n\r\nconst rootReducer = combineReducers({\r\n\tweatherData: weatherReducer,\r\n});\r\n\r\nexport default rootReducer;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers/rootReducer';\nimport { MulThemeProvider, createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\nimport { purple, red, yellow } from '@material-ui/core/colors';\n\nconst composeEnhancers = window['__REDUX_DEVTOOLS_EXTENSION_COMPOSE__'] || compose;\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)));\n\nconst theme = createMuiTheme({\n\tpalette: {\n\t\tprimary: { main: '#ffcdd2' },\n\t\tsecondary: {\n\t\t\tmain: '#f44336',\n\t\t},\n\t},\n});\nconsole.log(theme);\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<MuiThemeProvider theme={theme}>\n\t\t\t<React.StrictMode>\n\t\t\t\t<App />\n\t\t\t</React.StrictMode>\n\t\t\t,\n\t\t</MuiThemeProvider>\n\t\t,\n\t</Provider>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}